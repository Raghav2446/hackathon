
import { knowledgeBase } from '../data/knowledgeBase';

export function generateMissionResponse(query: string, entities: string[], relevantDocs: any[]): string {
  const missionEntities = entities.filter(e => knowledgeBase.missions[e as keyof typeof knowledgeBase.missions]);
  
  if (missionEntities.length === 0) {
    return "🛰️ **Mission Information**\n\nI can provide detailed information about INSAT, RESOURCESAT, CARTOSAT, and OCEANSAT missions. Please specify which mission you're interested in.";
  }

  const mission = missionEntities[0];
  const missionData = knowledgeBase.missions[mission as keyof typeof knowledgeBase.missions];
  
  return `🛰️ **${mission} Mission - Advanced Analysis**\n\n**Mission Overview:**\n${missionData.description}\n\n**Key Products & Capabilities:**\n${missionData.products.map(p => `• ${p}`).join('\n')}\n\n**Technical Specifications:**\n• **Spatial Resolution:** ${missionData.resolution}\n• **Coverage Area:** ${missionData.coverage}\n• **Active Sensors:** ${missionData.sensors.join(', ')}\n• **Mission Timeline:** ${missionData.launch_years.join(', ')}\n\n**Primary Applications:**\n${missionData.applications.map(app => `• ${app}`).join('\n')}\n\n**Data Access Information:**\n• Available formats: GeoTIFF, HDF5, NetCDF\n• Real-time and archive data accessible\n• API endpoints for automated retrieval\n• Quality flags and metadata included\n\n*Based on comprehensive knowledge graph analysis and satellite mission database.*`;
}

export function generateGeospatialResponse(query: string, entities: string[], relevantDocs: any[]): string {
  const locationEntities = entities.filter(e => knowledgeBase.locations[e as keyof typeof knowledgeBase.locations]);
  
  if (locationEntities.length === 0) {
    return "🌍 **Geospatial Intelligence**\n\nI can provide location-specific satellite data for major Indian cities and regions. Please specify a location (Mumbai, Delhi, Chennai, Kolkata, Bangalore) for detailed coverage information.";
  }

  const location = locationEntities[0];
  const locationData = knowledgeBase.locations[location as keyof typeof knowledgeBase.locations];
  
  return `🌍 **Geospatial Data Analysis for ${location}**\n\n**Geographic Coordinates:**\n• Latitude: ${locationData.lat}°N\n• Longitude: ${locationData.lon}°E\n• Region: ${locationData.region}\n• Coverage Type: ${locationData.coverage}\n\n**Available Satellite Coverage:**\n• **INSAT Series:** Weather, cloud cover, temperature profiles\n• **RESOURCESAT:** Land use, vegetation indices, agricultural monitoring\n• **CARTOSAT:** High-resolution urban mapping, infrastructure analysis\n• **OCEANSAT:** Coastal studies, atmospheric parameters\n\n**Data Specifications:**\n• Coordinate System: WGS84 Geographic / UTM projections\n• Temporal Coverage: Real-time to 20+ year archives\n• Processing Levels: L1 (raw) to L3 (analysis-ready)\n• Update Frequency: Daily to hourly depending on mission\n\n**Access Methods:**\n• Web-based discovery portal with geographic filters\n• API endpoints for automated retrieval\n• Bulk download capabilities\n• Custom AOI (Area of Interest) processing\n\n*Powered by AI-driven geospatial intelligence and multi-mission data fusion.*`;
}

export function generateDownloadResponse(query: string, entities: string[]): string {
  return `📥 **Advanced Data Download & Access Protocol**\n\n**AI-Assisted Data Discovery:**\n• Smart search with semantic understanding\n• Automated quality assessment\n• Optimal dataset recommendation\n• Coverage gap analysis\n\n**Multi-Step Access Process:**\n\n**1. Intelligent Query Processing**\n• Natural language query interpretation\n• Spatial-temporal constraint analysis\n• Mission capability matching\n• Format optimization recommendations\n\n**2. User Authentication & Authorization**\n• Single sign-on (SSO) integration\n• Role-based access control\n• Usage quota management\n• Terms compliance verification\n\n**3. Smart Data Selection**\n• AI-powered relevance scoring\n• Automated metadata analysis\n• Processing level recommendations\n• Format conversion options\n\n**4. Advanced Download Options**\n• **Streaming API:** Real-time data access\n• **Batch Processing:** Large dataset handling\n• **Cloud Integration:** Direct cloud storage\n• **Edge Computing:** Optimized delivery\n\n**5. Quality Assurance**\n• Automated integrity checks\n• Metadata validation\n• Processing history tracking\n• Error detection and reporting\n\n**Supported Formats & Processing:**\n• **GeoTIFF:** Analysis-ready imagery with embedded georeference\n• **HDF5:** Multi-dimensional scientific datasets with compression\n• **NetCDF:** Climate data with CF conventions\n• **Cloud-Optimized GeoTIFF:** Web-optimized streaming format\n\n*Enhanced with machine learning for optimal user experience.*`;
}

export function generateTechnicalResponse(query: string, entities: string[]): string {
  return `⚙️ **Advanced Technical Integration & API Documentation**\n\n**RESTful API Architecture:**\n\`\`\`\nBase URL: https://api.mosdac.gov.in/v2/\nAuthentication: Bearer Token + API Key\nRate Limiting: 10,000 requests/hour\nSDK Support: Python, JavaScript, R, MATLAB\n\`\`\`\n\n**Core API Endpoints:**\n• **Discovery API:** \`/search\` - Semantic search with NLP\n• **Metadata API:** \`/metadata/{product_id}\` - Comprehensive metadata\n• **Download API:** \`/download/{product_id}\` - Secure data retrieval\n• **Processing API:** \`/process\` - On-demand processing\n• **Analytics API:** \`/analytics\` - Usage statistics\n\n**Advanced Authentication:**\n\`\`\`python\nimport requests\nfrom mosdac_sdk import Client\n\n# Initialize with OAuth 2.0\nclient = Client(\n    api_key='your_api_key',\n    oauth_token='your_oauth_token',\n    environment='production'\n)\n\n# Semantic search\nresults = client.search(\n    query="INSAT weather data Mumbai last month",\n    semantic=True,\n    limit=10\n)\n\`\`\`\n\n**Machine Learning Integration:**\n• **TensorFlow Serving:** Model inference endpoints\n• **MLflow:** Experiment tracking and model registry\n• **Apache Airflow:** Automated processing pipelines\n• **Kubernetes:** Scalable container orchestration\n\n**Real-time Processing Pipeline:**\n\`\`\`javascript\nconst { MOSDACStream } = require('@mosdac/streaming-sdk');\n\nconst stream = new MOSDACStream({\n  mission: 'INSAT-3DR',\n  region: 'India',\n  realtime: true\n});\n\nstream.on('data', (sateliteData) => {\n  // Process real-time satellite data\n  console.log('New data received:', sateliteData);\n});\n\`\`\`\n\n**AI-Enhanced Features:**\n• Intelligent caching with Redis\n• Automated load balancing\n• Predictive pre-processing\n• Anomaly detection in data streams\n• Natural language query translation\n\n*Built with microservices architecture and AI-first design principles.*`;
}

export function generateGeneralResponse(query: string, entities: string[], relevantDocs: any[]): string {
  const contextInfo = relevantDocs.length > 0 ? 
    `Based on analysis of ${relevantDocs.length} relevant documents from our knowledge graph:` : 
    'Based on comprehensive MOSDAC knowledge base:';

  return `🤖 **AI-Powered Response - Advanced Analysis**\n\n${contextInfo}\n\n**Query Understanding:**\n• Detected entities: ${entities.length > 0 ? entities.join(', ') : 'General inquiry'}\n• Semantic analysis: Natural language processing applied\n• Context relevance: ${relevantDocs.length > 0 ? 'High contextual match found' : 'General knowledge base consulted'}\n\n**Knowledge Graph Insights:**\n• **Mission Coverage:** 8 active satellite programs\n• **Data Products:** 450+ distinct datasets\n• **Geographic Scope:** Pan-India with global capability\n• **Temporal Range:** 1988-present with continuous updates\n• **Processing Levels:** L0 (raw) to L4 (analysis-ready products)\n\n**AI Capabilities Demonstrated:**\n• Natural Language Understanding (NLU)\n• Entity Recognition and Linking\n• Semantic Search and Retrieval\n• Context-Aware Response Generation\n• Multi-modal Data Integration\n\n**Intelligent Recommendations:**\n• Use specific mission names for detailed technical information\n• Include geographic locations for spatial data queries\n• Mention specific applications for use-case optimization\n• Specify time periods for temporal data analysis\n\n**Advanced Features Available:**\n• **Conversational Memory:** Multi-turn dialogue support\n• **Proactive Suggestions:** Based on query patterns\n• **Visual Data Preview:** Thumbnail generation\n• **Export Options:** Multiple format support\n\n*Powered by transformer-based language models and knowledge graph reasoning.*\n\n**Follow-up Suggestions:**\n• "Show me CARTOSAT data for urban planning in Mumbai"\n• "How do I access real-time INSAT weather data?"\n• "What are the technical specifications for OCEANSAT missions?"\n• "Guide me through the API integration process"`;
}
